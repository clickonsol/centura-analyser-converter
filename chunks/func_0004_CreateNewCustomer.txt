Function CreateNewCustomer(sCustomerName, sAddress, sCity, sState, sZip, sPhone, nCreditLimit)
    Parameters:
        Receive String: sCustomerName
        Receive String: sAddress
        Receive String: sCity
        Receive String: sState
        Receive String: sZip
        Receive String: sPhone
        Receive Number: nCreditLimit
    Returns Number
    
    Local Variables:
        Handle: hSql
        String: sSQL
        Number: nNewCustomerID
        String: sCustomerCode
        DateTime: dtNow
        Boolean: bValidated = TRUE
        String: sErrorDetails
    
    ! Validate input parameters
    If NOT ValidateCustomerData(sCustomerName, sAddress, sCity, sState, sZip, sPhone, nCreditLimit, sErrorDetails)
        Call WriteToLog("Customer validation failed: " || sErrorDetails)
        Return -1
    EndIf
    
    ! Check for duplicate customer
    If CheckDuplicateCustomer(sCustomerName, sPhone)
        Call WriteToLog("Duplicate customer detected: " || sCustomerName)
        Return -2
    EndIf
    
    ! Generate new customer ID
    Set nNewCustomerID = GenerateCustomerID()
    If nNewCustomerID <= 0
        Call WriteToLog("Failed to generate customer ID")
        Return -3
    EndIf
    
    ! Generate customer code
    Set sCustomerCode = GenerateCustomerCode(sCustomerName, nNewCustomerID)
    Set dtNow = SalDateCurrent()
    
    ! Begin transaction
    Call SalSqlExecute("BEGIN TRANSACTION", gsPrimaryDB)
    
    ! Insert customer record
    Set sSQL = "INSERT INTO customers (customer_id, customer_code, customer_name, address, city, state, zip_code, phone, credit_limit, status, created_date, created_by) VALUES (:nNewCustomerID, :sCustomerCode, :sCustomerName, :sAddress, :sCity, :sState, :sZip, :sPhone, :nCreditLimit, :CUST_STATUS_ACTIVE, :dtNow, :gsCurrentUser)"
    
    If SalSqlPrepareAndExecute(hSql, sSQL, gsPrimaryDB)
        Call SalSqlDestroy(hSql)
        
        ! Create customer account record
        If CreateCustomerAccount(nNewCustomerID, nCreditLimit)
            ! Log the creation
            Call LogCustomerActivity(nNewCustomerID, "CREATED", "New customer created by " || gsCurrentUser)
            
            ! Commit transaction
            Call SalSqlExecute("COMMIT", gsPrimaryDB)
            
            Call WriteToLog("Customer created successfully: ID " || SalNumberToString(nNewCustomerID))
            Return nNewCustomerID
        Else
            ! Rollback on account creation failure
            Call SalSqlExecute("ROLLBACK", gsPrimaryDB)
            Call WriteToLog("Failed to create customer account for ID " || SalNumberToString(nNewCustomerID))
            Return -4
        EndIf
    Else
        Call SalSqlExecute("ROLLBACK", gsPrimaryDB)
        Call WriteToLog("Failed to insert customer record")
        Return -5
    EndIf